import java.util.Scanner;

public class ComplicatedBinarySearch {

    // Recursive binary search function
    static int binarySearch(int arr[], int low, int high, int target) {
        if (high >= low) {
            int mid = low + (high - low) / 2;

            // Check if the target is present at the mid position
            if (arr[mid] == target) {
                return mid;
            }

            // If target is smaller than mid, then it can only be present in the left subarray
            if (arr[mid] > target) {
                return binarySearch(arr, low, mid - 1, target);
            }

            // Else the target must be in the right subarray
            return binarySearch(arr, mid + 1, high, target);
        }

        // If the target is not present in the array
        return -1;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Input array (must be sorted)
        System.out.print("Enter the size of the array: ");
        int size = scanner.nextInt();
        int[] arr = new int[size];
        System.out.println("Enter sorted elements:");
        for (int i = 0; i < size; i++) {
            arr[i] = scanner.nextInt();
        }

        // Input target element to search
        System.out.print("Enter the element to search: ");
        int target = scanner.nextInt();

        // Perform binary search
        int result = binarySearch(arr, 0, size - 1, target);

        // Output the result
        if (result == -1) {
            System.out.println("Element not present in the array");
        } else {
            System.out.println("Element found at index " + result);
        }
    }
}
